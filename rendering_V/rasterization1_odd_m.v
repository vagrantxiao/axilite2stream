// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization1_odd_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        triangle_2d_x0_V,
        triangle_2d_y0_V,
        triangle_2d_x1_V,
        triangle_2d_y1_V,
        triangle_2d_x2_V,
        triangle_2d_y2_V,
        triangle_2d_z_V,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] triangle_2d_x0_V;
input  [7:0] triangle_2d_y0_V;
input  [7:0] triangle_2d_x1_V;
input  [7:0] triangle_2d_y1_V;
input  [7:0] triangle_2d_x2_V;
input  [7:0] triangle_2d_y2_V;
input  [7:0] triangle_2d_z_V;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] Output_1_V_V_din;
reg Output_1_V_V_write;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] max_min_V_0;
reg   [7:0] max_min_V_1;
reg   [7:0] max_min_V_2;
reg   [15:0] max_index_V_0;
reg   [7:0] max_min_V_3;
reg   [7:0] max_min_V_4;
reg    Output_1_V_V_blk_n;
wire   [0:0] icmp_ln208_fu_209_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln208_reg_578;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [7:0] max_min_V_0_load_reg_582;
reg   [7:0] max_min_V_1_load_reg_587;
reg   [7:0] max_min_V_2_load_reg_592;
wire   [7:0] triangle_2d_same_x0_s_fu_235_p3;
reg   [7:0] triangle_2d_same_x0_s_reg_597;
wire   [7:0] triangle_2d_same_y0_s_fu_243_p3;
reg   [7:0] triangle_2d_same_y0_s_reg_607;
wire   [7:0] triangle_2d_same_x1_s_fu_251_p3;
reg   [7:0] triangle_2d_same_x1_s_reg_617;
wire   [7:0] triangle_2d_same_y1_s_fu_259_p3;
reg   [7:0] triangle_2d_same_y1_s_reg_627;
wire   [7:0] select_ln887_fu_304_p3;
reg   [7:0] select_ln887_reg_638;
wire   [7:0] select_ln895_fu_342_p3;
reg   [7:0] select_ln895_reg_645;
wire   [7:0] select_ln887_1_fu_380_p3;
reg   [7:0] select_ln887_1_reg_652;
wire   [7:0] select_ln895_1_fu_418_p3;
reg   [7:0] select_ln895_1_reg_658;
wire   [7:0] sub_ln214_fu_441_p2;
reg   [7:0] sub_ln214_reg_664;
wire   [15:0] mul_ln214_fu_483_p2;
wire   [31:0] p_Result_2_fu_267_p5;
wire   [31:0] p_Result_3_fu_432_p5;
wire   [31:0] p_Result_4_fu_495_p4;
wire   [31:0] p_Result_5_fu_504_p5;
reg    ap_block_state4;
wire   [31:0] p_Result_1_fu_522_p5;
wire   [31:0] p_Result_s_fu_538_p4;
wire   [8:0] lhs_V_18_fu_119_p1;
wire   [8:0] rhs_V_13_fu_123_p1;
wire   [8:0] lhs_V_19_fu_133_p1;
wire   [8:0] rhs_V_14_fu_137_p1;
wire   [8:0] ret_V_23_fu_127_p2;
wire   [8:0] ret_V_24_fu_141_p2;
wire  signed [8:0] ret_V_25_fu_155_p0;
wire  signed [8:0] ret_V_25_fu_155_p1;
wire   [17:0] ret_V_25_fu_155_p2;
wire   [8:0] lhs_V_21_fu_165_p1;
wire   [8:0] lhs_V_22_fu_175_p1;
wire   [8:0] ret_V_26_fu_169_p2;
wire   [8:0] ret_V_27_fu_179_p2;
wire  signed [8:0] ret_V_28_fu_193_p0;
wire  signed [8:0] ret_V_28_fu_193_p1;
wire   [17:0] ret_V_28_fu_193_p2;
wire   [16:0] trunc_ln1352_fu_161_p1;
wire   [16:0] trunc_ln1352_1_fu_199_p1;
wire   [17:0] ret_V_29_fu_203_p2;
wire   [0:0] tmp_fu_227_p3;
wire   [0:0] icmp_ln887_2_fu_284_p2;
wire   [0:0] icmp_ln887_3_fu_294_p2;
wire   [0:0] icmp_ln887_fu_280_p2;
wire   [7:0] select_ln119_fu_288_p3;
wire   [7:0] select_ln126_fu_298_p3;
wire   [0:0] icmp_ln895_1_fu_322_p2;
wire   [0:0] icmp_ln895_2_fu_332_p2;
wire   [0:0] icmp_ln895_fu_318_p2;
wire   [7:0] select_ln100_fu_326_p3;
wire   [7:0] select_ln107_fu_336_p3;
wire   [0:0] icmp_ln887_5_fu_360_p2;
wire   [0:0] icmp_ln887_6_fu_370_p2;
wire   [0:0] icmp_ln887_4_fu_356_p2;
wire   [7:0] select_ln119_1_fu_364_p3;
wire   [7:0] select_ln126_1_fu_374_p3;
wire   [0:0] icmp_ln895_4_fu_398_p2;
wire   [0:0] icmp_ln895_5_fu_408_p2;
wire   [0:0] icmp_ln895_3_fu_394_p2;
wire   [7:0] select_ln100_1_fu_402_p3;
wire   [7:0] select_ln107_1_fu_412_p3;
wire   [8:0] lhs_V_fu_451_p1;
wire   [8:0] rhs_V_fu_454_p1;
wire   [8:0] lhs_V_24_fu_463_p1;
wire   [8:0] rhs_V_17_fu_466_p1;
wire   [8:0] ret_V_fu_457_p2;
wire   [8:0] ret_V_30_fu_469_p2;
wire  signed [8:0] mul_ln214_fu_483_p0;
wire  signed [8:0] mul_ln214_fu_483_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 max_min_V_0 = 8'd0;
#0 max_min_V_1 = 8'd0;
#0 max_min_V_2 = 8'd0;
#0 max_index_V_0 = 16'd0;
#0 max_min_V_3 = 8'd0;
#0 max_min_V_4 = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln208_reg_578 <= icmp_ln208_fu_209_p2;
        max_min_V_0_load_reg_582 <= max_min_V_0;
        max_min_V_1_load_reg_587 <= max_min_V_1;
        max_min_V_2_load_reg_592 <= max_min_V_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3))) begin
        max_index_V_0 <= mul_ln214_fu_483_p2;
        max_min_V_4 <= sub_ln214_fu_441_p2;
        sub_ln214_reg_664 <= sub_ln214_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2))) begin
        max_min_V_0 <= select_ln887_fu_304_p3;
        max_min_V_1 <= select_ln895_fu_342_p3;
        max_min_V_2 <= select_ln887_1_fu_380_p3;
        max_min_V_3 <= select_ln895_1_fu_418_p3;
        select_ln887_1_reg_652 <= select_ln887_1_fu_380_p3;
        select_ln887_reg_638 <= select_ln887_fu_304_p3;
        select_ln895_1_reg_658 <= select_ln895_1_fu_418_p3;
        select_ln895_reg_645 <= select_ln895_fu_342_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        triangle_2d_same_x0_s_reg_597 <= triangle_2d_same_x0_s_fu_235_p3;
        triangle_2d_same_x1_s_reg_617 <= triangle_2d_same_x1_s_fu_251_p3;
        triangle_2d_same_y0_s_reg_607 <= triangle_2d_same_y0_s_fu_243_p3;
        triangle_2d_same_y1_s_reg_627 <= triangle_2d_same_y1_s_fu_259_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln208_reg_578 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_full_n;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state6))) begin
        Output_1_V_V_din = p_Result_s_fu_538_p4;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state5))) begin
        Output_1_V_V_din = 32'd0;
    end else if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        Output_1_V_V_din = p_Result_1_fu_522_p5;
    end else if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        Output_1_V_V_din = p_Result_5_fu_504_p5;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3))) begin
        Output_1_V_V_din = p_Result_4_fu_495_p4;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_1_V_V_din = p_Result_3_fu_432_p5;
    end else if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_1_V_V_din = 32'd1;
    end else if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_1_V_V_din = p_Result_2_fu_267_p5;
    end else begin
        Output_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2)) | (~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state5)) | (~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Output_1_V_V_write = 1'b1;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n)));
end

always @ (*) begin
    ap_block_state4 = (((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n)));
end

assign icmp_ln208_fu_209_p2 = ((trunc_ln1352_fu_161_p1 == trunc_ln1352_1_fu_199_p1) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_284_p2 = ((triangle_2d_same_x0_s_reg_597 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_294_p2 = ((triangle_2d_same_x1_s_reg_617 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_4_fu_356_p2 = ((triangle_2d_same_y0_s_reg_607 < triangle_2d_same_y1_s_reg_627) ? 1'b1 : 1'b0);

assign icmp_ln887_5_fu_360_p2 = ((triangle_2d_same_y0_s_reg_607 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_6_fu_370_p2 = ((triangle_2d_same_y1_s_reg_627 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_280_p2 = ((triangle_2d_same_x0_s_reg_597 < triangle_2d_same_x1_s_reg_617) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_322_p2 = ((triangle_2d_same_x0_s_reg_597 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_332_p2 = ((triangle_2d_same_x1_s_reg_617 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_394_p2 = ((triangle_2d_same_y0_s_reg_607 > triangle_2d_same_y1_s_reg_627) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_398_p2 = ((triangle_2d_same_y0_s_reg_607 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_408_p2 = ((triangle_2d_same_y1_s_reg_627 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_318_p2 = ((triangle_2d_same_x0_s_reg_597 > triangle_2d_same_x1_s_reg_617) ? 1'b1 : 1'b0);

assign lhs_V_18_fu_119_p1 = triangle_2d_x2_V;

assign lhs_V_19_fu_133_p1 = triangle_2d_y1_V;

assign lhs_V_21_fu_165_p1 = triangle_2d_y2_V;

assign lhs_V_22_fu_175_p1 = triangle_2d_x1_V;

assign lhs_V_24_fu_463_p1 = select_ln895_1_reg_658;

assign lhs_V_fu_451_p1 = select_ln895_reg_645;

assign mul_ln214_fu_483_p0 = ret_V_30_fu_469_p2;

assign mul_ln214_fu_483_p1 = ret_V_fu_457_p2;

assign mul_ln214_fu_483_p2 = ($signed(mul_ln214_fu_483_p0) * $signed(mul_ln214_fu_483_p1));

assign p_Result_1_fu_522_p5 = {{{{{{8'd0}, {max_min_V_4}}}, {max_min_V_3}}}, {max_min_V_2_load_reg_592}};

assign p_Result_2_fu_267_p5 = {{{{triangle_2d_same_x1_s_fu_251_p3}, {triangle_2d_same_y0_s_fu_243_p3}}, {triangle_2d_same_x0_s_fu_235_p3}}, {8'd0}};

assign p_Result_3_fu_432_p5 = {{{{triangle_2d_z_V}, {triangle_2d_y2_V}}, {triangle_2d_x2_V}}, {triangle_2d_same_y1_s_reg_627}};

assign p_Result_4_fu_495_p4 = {{{select_ln895_reg_645}, {select_ln887_reg_638}}, {mul_ln214_fu_483_p2}};

assign p_Result_5_fu_504_p5 = {{{{{{8'd0}, {sub_ln214_reg_664}}}, {select_ln895_1_reg_658}}}, {select_ln887_1_reg_652}};

assign p_Result_s_fu_538_p4 = {{{max_min_V_1_load_reg_587}, {max_min_V_0_load_reg_582}}, {max_index_V_0}};

assign ret_V_23_fu_127_p2 = (lhs_V_18_fu_119_p1 - rhs_V_13_fu_123_p1);

assign ret_V_24_fu_141_p2 = (lhs_V_19_fu_133_p1 - rhs_V_14_fu_137_p1);

assign ret_V_25_fu_155_p0 = ret_V_24_fu_141_p2;

assign ret_V_25_fu_155_p1 = ret_V_23_fu_127_p2;

assign ret_V_25_fu_155_p2 = ($signed(ret_V_25_fu_155_p0) * $signed(ret_V_25_fu_155_p1));

assign ret_V_26_fu_169_p2 = (lhs_V_21_fu_165_p1 - rhs_V_14_fu_137_p1);

assign ret_V_27_fu_179_p2 = (lhs_V_22_fu_175_p1 - rhs_V_13_fu_123_p1);

assign ret_V_28_fu_193_p0 = ret_V_27_fu_179_p2;

assign ret_V_28_fu_193_p1 = ret_V_26_fu_169_p2;

assign ret_V_28_fu_193_p2 = ($signed(ret_V_28_fu_193_p0) * $signed(ret_V_28_fu_193_p1));

assign ret_V_29_fu_203_p2 = (ret_V_25_fu_155_p2 - ret_V_28_fu_193_p2);

assign ret_V_30_fu_469_p2 = (lhs_V_24_fu_463_p1 - rhs_V_17_fu_466_p1);

assign ret_V_fu_457_p2 = (lhs_V_fu_451_p1 - rhs_V_fu_454_p1);

assign rhs_V_13_fu_123_p1 = triangle_2d_x0_V;

assign rhs_V_14_fu_137_p1 = triangle_2d_y0_V;

assign rhs_V_17_fu_466_p1 = select_ln887_1_reg_652;

assign rhs_V_fu_454_p1 = select_ln887_reg_638;

assign select_ln100_1_fu_402_p3 = ((icmp_ln895_4_fu_398_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_607 : triangle_2d_y2_V);

assign select_ln100_fu_326_p3 = ((icmp_ln895_1_fu_322_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_597 : triangle_2d_x2_V);

assign select_ln107_1_fu_412_p3 = ((icmp_ln895_5_fu_408_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_627 : triangle_2d_y2_V);

assign select_ln107_fu_336_p3 = ((icmp_ln895_2_fu_332_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_617 : triangle_2d_x2_V);

assign select_ln119_1_fu_364_p3 = ((icmp_ln887_5_fu_360_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_607 : triangle_2d_y2_V);

assign select_ln119_fu_288_p3 = ((icmp_ln887_2_fu_284_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_597 : triangle_2d_x2_V);

assign select_ln126_1_fu_374_p3 = ((icmp_ln887_6_fu_370_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_627 : triangle_2d_y2_V);

assign select_ln126_fu_298_p3 = ((icmp_ln887_3_fu_294_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_617 : triangle_2d_x2_V);

assign select_ln887_1_fu_380_p3 = ((icmp_ln887_4_fu_356_p2[0:0] === 1'b1) ? select_ln119_1_fu_364_p3 : select_ln126_1_fu_374_p3);

assign select_ln887_fu_304_p3 = ((icmp_ln887_fu_280_p2[0:0] === 1'b1) ? select_ln119_fu_288_p3 : select_ln126_fu_298_p3);

assign select_ln895_1_fu_418_p3 = ((icmp_ln895_3_fu_394_p2[0:0] === 1'b1) ? select_ln100_1_fu_402_p3 : select_ln107_1_fu_412_p3);

assign select_ln895_fu_342_p3 = ((icmp_ln895_fu_318_p2[0:0] === 1'b1) ? select_ln100_fu_326_p3 : select_ln107_fu_336_p3);

assign sub_ln214_fu_441_p2 = (select_ln895_reg_645 - select_ln887_reg_638);

assign tmp_fu_227_p3 = ret_V_29_fu_203_p2[32'd17];

assign triangle_2d_same_x0_s_fu_235_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_x1_V : triangle_2d_x0_V);

assign triangle_2d_same_x1_s_fu_251_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_x0_V : triangle_2d_x1_V);

assign triangle_2d_same_y0_s_fu_243_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_y1_V : triangle_2d_y0_V);

assign triangle_2d_same_y1_s_fu_259_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_y0_V : triangle_2d_y1_V);

assign trunc_ln1352_1_fu_199_p1 = ret_V_28_fu_193_p2[16:0];

assign trunc_ln1352_fu_161_p1 = ret_V_25_fu_155_p2[16:0];

endmodule //rasterization1_odd_m
