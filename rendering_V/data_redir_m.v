// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_redir_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Output_1_V_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [31:0] tmp_V_reg_111;
reg    ap_block_state1;
reg   [31:0] tmp_V_14_reg_116;
reg   [7:0] triangle_2ds_1_x0_V_reg_121;
reg   [7:0] triangle_2ds_1_y0_V_reg_126;
reg   [7:0] triangle_2ds_1_x1_V_reg_131;
reg   [7:0] triangle_2ds_1_y1_V_reg_136;
reg   [7:0] triangle_2ds_1_x2_V_reg_141;
reg   [7:0] triangle_2ds_1_y2_V_reg_146;
reg   [7:0] triangle_2ds_1_z_V_reg_151;
wire    grp_rasterization1_odd_m_fu_50_ap_start;
wire    grp_rasterization1_odd_m_fu_50_ap_done;
wire    grp_rasterization1_odd_m_fu_50_ap_idle;
wire    grp_rasterization1_odd_m_fu_50_ap_ready;
wire   [31:0] grp_rasterization1_odd_m_fu_50_Output_1_V_V_din;
wire    grp_rasterization1_odd_m_fu_50_Output_1_V_V_write;
wire    call_ret_projection_odd_m_fu_75_ap_ready;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_0;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_1;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_2;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_3;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_4;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_5;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_6;
reg    grp_rasterization1_odd_m_fu_50_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_rasterization1_odd_m_fu_50_ap_start_reg = 1'b0;
end

rasterization1_odd_m grp_rasterization1_odd_m_fu_50(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization1_odd_m_fu_50_ap_start),
    .ap_done(grp_rasterization1_odd_m_fu_50_ap_done),
    .ap_idle(grp_rasterization1_odd_m_fu_50_ap_idle),
    .ap_ready(grp_rasterization1_odd_m_fu_50_ap_ready),
    .triangle_2d_x0_V(triangle_2ds_1_x0_V_reg_121),
    .triangle_2d_y0_V(triangle_2ds_1_y0_V_reg_126),
    .triangle_2d_x1_V(triangle_2ds_1_x1_V_reg_131),
    .triangle_2d_y1_V(triangle_2ds_1_y1_V_reg_136),
    .triangle_2d_x2_V(triangle_2ds_1_x2_V_reg_141),
    .triangle_2d_y2_V(triangle_2ds_1_y2_V_reg_146),
    .triangle_2d_z_V(triangle_2ds_1_z_V_reg_151),
    .Output_1_V_V_din(grp_rasterization1_odd_m_fu_50_Output_1_V_V_din),
    .Output_1_V_V_full_n(Output_1_V_V_full_n),
    .Output_1_V_V_write(grp_rasterization1_odd_m_fu_50_Output_1_V_V_write)
);

projection_odd_m call_ret_projection_odd_m_fu_75(
    .ap_ready(call_ret_projection_odd_m_fu_75_ap_ready),
    .input_lo_V(tmp_V_reg_111),
    .input_mi_V(tmp_V_14_reg_116),
    .input_hi_V(Input_1_V_V),
    .ap_return_0(call_ret_projection_odd_m_fu_75_ap_return_0),
    .ap_return_1(call_ret_projection_odd_m_fu_75_ap_return_1),
    .ap_return_2(call_ret_projection_odd_m_fu_75_ap_return_2),
    .ap_return_3(call_ret_projection_odd_m_fu_75_ap_return_3),
    .ap_return_4(call_ret_projection_odd_m_fu_75_ap_return_4),
    .ap_return_5(call_ret_projection_odd_m_fu_75_ap_return_5),
    .ap_return_6(call_ret_projection_odd_m_fu_75_ap_return_6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization1_odd_m_fu_50_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_rasterization1_odd_m_fu_50_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization1_odd_m_fu_50_ap_ready == 1'b1)) begin
            grp_rasterization1_odd_m_fu_50_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_14_reg_116 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_111 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        triangle_2ds_1_x0_V_reg_121 <= call_ret_projection_odd_m_fu_75_ap_return_0;
        triangle_2ds_1_x1_V_reg_131 <= call_ret_projection_odd_m_fu_75_ap_return_2;
        triangle_2ds_1_x2_V_reg_141 <= call_ret_projection_odd_m_fu_75_ap_return_4;
        triangle_2ds_1_y0_V_reg_126 <= call_ret_projection_odd_m_fu_75_ap_return_1;
        triangle_2ds_1_y1_V_reg_136 <= call_ret_projection_odd_m_fu_75_ap_return_3;
        triangle_2ds_1_y2_V_reg_146 <= call_ret_projection_odd_m_fu_75_ap_return_5;
        triangle_2ds_1_z_V_reg_151 <= call_ret_projection_odd_m_fu_75_ap_return_6;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Output_1_V_V_write = grp_rasterization1_odd_m_fu_50_Output_1_V_V_write;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_rasterization1_odd_m_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_rasterization1_odd_m_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_rasterization1_odd_m_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V_din = grp_rasterization1_odd_m_fu_50_Output_1_V_V_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

assign grp_rasterization1_odd_m_fu_50_ap_start = grp_rasterization1_odd_m_fu_50_ap_start_reg;

endmodule //data_redir_m
