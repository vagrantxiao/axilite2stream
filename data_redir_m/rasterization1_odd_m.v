// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization1_odd_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        triangle_2d_x0_V,
        triangle_2d_y0_V,
        triangle_2d_x1_V,
        triangle_2d_y1_V,
        triangle_2d_x2_V,
        triangle_2d_y2_V,
        triangle_2d_z_V,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] triangle_2d_x0_V;
input  [7:0] triangle_2d_y0_V;
input  [7:0] triangle_2d_x1_V;
input  [7:0] triangle_2d_y1_V;
input  [7:0] triangle_2d_x2_V;
input  [7:0] triangle_2d_y2_V;
input  [7:0] triangle_2d_z_V;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] max_min_V_0;
reg   [7:0] max_min_V_1;
reg   [7:0] max_min_V_2;
reg   [15:0] max_index_V_0;
reg   [7:0] max_min_V_3;
reg   [7:0] max_min_V_4;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_151_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_1_reg_564;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire  signed [17:0] grp_fu_461_p3;
reg  signed [17:0] r_V_4_reg_539;
wire   [16:0] tmp_fu_123_p1;
reg   [16:0] tmp_reg_544;
wire  signed [17:0] grp_fu_470_p3;
reg  signed [17:0] r_V_7_reg_549;
wire   [16:0] tmp_4_fu_144_p1;
reg   [16:0] tmp_4_reg_554;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state2_io;
reg   [7:0] max_min_V_0_load_reg_568;
reg   [7:0] max_min_V_1_load_reg_573;
reg   [7:0] max_min_V_2_load_reg_578;
wire   [7:0] triangle_2d_same_x0_s_fu_175_p3;
reg   [7:0] triangle_2d_same_x0_s_reg_583;
wire   [7:0] triangle_2d_same_y0_s_fu_181_p3;
reg   [7:0] triangle_2d_same_y0_s_reg_593;
wire   [7:0] triangle_2d_same_x1_s_fu_187_p3;
reg   [7:0] triangle_2d_same_x1_s_reg_603;
wire   [7:0] triangle_2d_same_y1_s_fu_193_p3;
reg   [7:0] triangle_2d_same_y1_s_reg_613;
wire   [7:0] agg_result_V_i_fu_236_p3;
reg   [7:0] agg_result_V_i_reg_624;
wire   [7:0] agg_result_V_i1_fu_274_p3;
reg   [7:0] agg_result_V_i1_reg_631;
wire   [7:0] agg_result_V_i2_fu_312_p3;
reg   [7:0] agg_result_V_i2_reg_638;
wire   [7:0] agg_result_V_i3_fu_350_p3;
reg   [7:0] agg_result_V_i3_reg_644;
wire   [7:0] tmp_8_fu_373_p2;
reg   [7:0] tmp_8_reg_650;
wire  signed [15:0] grp_fu_479_p3;
wire   [31:0] p_Result_2_fu_199_p5;
wire   [31:0] p_Result_3_fu_364_p5;
wire   [31:0] p_Result_4_fu_410_p4;
wire   [31:0] p_Result_5_fu_418_p5;
wire   [31:0] p_Result_1_fu_436_p5;
wire   [31:0] p_Result_s_fu_452_p4;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state5_io;
wire   [8:0] lhs_V_2_fu_97_p1;
wire   [8:0] rhs_V_2_fu_101_p1;
wire  signed [8:0] r_V_2_fu_105_p2;
wire   [8:0] lhs_V_5_fu_126_p1;
wire   [8:0] rhs_V_3_fu_115_p1;
wire  signed [8:0] r_V_5_fu_130_p2;
(* use_dsp48 = "no" *) wire   [17:0] r_V_8_fu_147_p2;
wire   [0:0] tmp_5_fu_167_p3;
wire   [0:0] tmp_i_6_fu_216_p2;
wire   [0:0] tmp_4_i_fu_226_p2;
wire   [0:0] tmp_i_fu_212_p2;
wire   [7:0] in0_V_in2_V_i_fu_220_p3;
wire   [7:0] in1_V_in2_V_i_fu_230_p3;
wire   [0:0] tmp_i1_7_fu_254_p2;
wire   [0:0] tmp_5_i_fu_264_p2;
wire   [0:0] tmp_i1_fu_250_p2;
wire   [7:0] in0_V_in2_V_i1_fu_258_p3;
wire   [7:0] in1_V_in2_V_i1_fu_268_p3;
wire   [0:0] tmp_i2_8_fu_292_p2;
wire   [0:0] tmp_4_i1_fu_302_p2;
wire   [0:0] tmp_i2_fu_288_p2;
wire   [7:0] in0_V_in2_V_i2_fu_296_p3;
wire   [7:0] in1_V_in2_V_i2_fu_306_p3;
wire   [0:0] tmp_i3_9_fu_330_p2;
wire   [0:0] tmp_5_i1_fu_340_p2;
wire   [0:0] tmp_i3_fu_326_p2;
wire   [7:0] in0_V_in2_V_i3_fu_334_p3;
wire   [7:0] in1_V_in2_V_i3_fu_344_p3;
wire   [8:0] lhs_V_fu_383_p1;
wire   [8:0] rhs_V_fu_386_p1;
wire  signed [8:0] r_V_fu_389_p2;
wire   [7:0] grp_fu_461_p0;
wire   [7:0] grp_fu_461_p1;
wire   [7:0] grp_fu_470_p0;
wire   [7:0] grp_fu_470_p1;
wire   [7:0] grp_fu_479_p0;
wire   [7:0] grp_fu_479_p1;
reg   [6:0] ap_NS_fsm;
wire   [8:0] grp_fu_461_p00;
wire   [8:0] grp_fu_470_p00;
wire   [8:0] grp_fu_479_p00;
wire   [8:0] grp_fu_479_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 max_min_V_0 = 8'd0;
#0 max_min_V_1 = 8'd0;
#0 max_min_V_2 = 8'd0;
#0 max_index_V_0 = 16'd0;
#0 max_min_V_3 = 8'd0;
#0 max_min_V_4 = 8'd0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
end

data_redir_m_am_sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
data_redir_m_am_sbkb_U4(
    .din0(grp_fu_461_p0),
    .din1(grp_fu_461_p1),
    .din2(r_V_2_fu_105_p2),
    .dout(grp_fu_461_p3)
);

data_redir_m_am_sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
data_redir_m_am_sbkb_U5(
    .din0(grp_fu_470_p0),
    .din1(grp_fu_470_p1),
    .din2(r_V_5_fu_130_p2),
    .dout(grp_fu_470_p3)
);

data_redir_m_am_scud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
data_redir_m_am_scud_U6(
    .din0(grp_fu_479_p0),
    .din1(grp_fu_479_p1),
    .din2(r_V_fu_389_p2),
    .dout(grp_fu_479_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1)) | ((tmp_1_reg_564 == 1'd0) & (1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_1_reg_564 == 1'd1) & (1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1)) | ((tmp_1_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)) | ((tmp_1_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == Output_1_V_V_ap_ack)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == Output_1_V_V_ap_ack)) | ((tmp_1_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_1_V_V_ap_ack)) | ((tmp_1_reg_564 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_1_V_V_ap_ack)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == Output_1_V_V_ap_ack)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_1_V_V_ap_ack)) | ((tmp_1_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == Output_1_V_V_ap_ack)) | ((tmp_1_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == Output_1_V_V_ap_ack)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
        agg_result_V_i1_reg_631 <= agg_result_V_i1_fu_274_p3;
        agg_result_V_i2_reg_638 <= agg_result_V_i2_fu_312_p3;
        agg_result_V_i3_reg_644 <= agg_result_V_i3_fu_350_p3;
        agg_result_V_i_reg_624 <= agg_result_V_i_fu_236_p3;
        max_min_V_0 <= agg_result_V_i_fu_236_p3;
        max_min_V_1 <= agg_result_V_i1_fu_274_p3;
        max_min_V_2 <= agg_result_V_i2_fu_312_p3;
        max_min_V_3 <= agg_result_V_i3_fu_350_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
        max_index_V_0 <= grp_fu_479_p3;
        max_min_V_4 <= tmp_8_fu_373_p2;
        tmp_8_reg_650 <= tmp_8_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        max_min_V_0_load_reg_568 <= max_min_V_0;
        max_min_V_1_load_reg_573 <= max_min_V_1;
        max_min_V_2_load_reg_578 <= max_min_V_2;
        tmp_1_reg_564 <= tmp_1_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_V_4_reg_539 <= grp_fu_461_p3;
        r_V_7_reg_549 <= grp_fu_470_p3;
        tmp_4_reg_554 <= tmp_4_fu_144_p1;
        tmp_reg_544 <= tmp_fu_123_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        triangle_2d_same_x0_s_reg_583 <= triangle_2d_same_x0_s_fu_175_p3;
        triangle_2d_same_x1_s_reg_603 <= triangle_2d_same_x1_s_fu_187_p3;
        triangle_2d_same_y0_s_reg_593 <= triangle_2d_same_y0_s_fu_181_p3;
        triangle_2d_same_y1_s_reg_613 <= triangle_2d_same_y1_s_fu_193_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Output_1_V_V = p_Result_s_fu_452_p4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Output_1_V_V = 32'd0;
    end else if (((tmp_1_reg_564 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        Output_1_V_V = p_Result_1_fu_436_p5;
    end else if (((tmp_1_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        Output_1_V_V = p_Result_5_fu_418_p5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Output_1_V_V = p_Result_4_fu_410_p4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Output_1_V_V = p_Result_3_fu_364_p5;
    end else if (((tmp_1_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_1_V_V = 32'd1;
    end else if (((tmp_1_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_1_V_V = p_Result_2_fu_199_p5;
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_1_reg_564 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_1_reg_564 == 1'd1) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_1_fu_151_p2 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_1_fu_151_p2 == 1'd1) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((tmp_1_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_1_reg_564 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_1_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_1_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_1_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((tmp_1_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_i1_fu_274_p3 = ((tmp_i1_fu_250_p2[0:0] === 1'b1) ? in0_V_in2_V_i1_fu_258_p3 : in1_V_in2_V_i1_fu_268_p3);

assign agg_result_V_i2_fu_312_p3 = ((tmp_i2_fu_288_p2[0:0] === 1'b1) ? in0_V_in2_V_i2_fu_296_p3 : in1_V_in2_V_i2_fu_306_p3);

assign agg_result_V_i3_fu_350_p3 = ((tmp_i3_fu_326_p2[0:0] === 1'b1) ? in0_V_in2_V_i3_fu_334_p3 : in1_V_in2_V_i3_fu_344_p3);

assign agg_result_V_i_fu_236_p3 = ((tmp_i_fu_212_p2[0:0] === 1'b1) ? in0_V_in2_V_i_fu_220_p3 : in1_V_in2_V_i_fu_230_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state2_io = (((tmp_1_fu_151_p2 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0)) | ((tmp_1_fu_151_p2 == 1'd1) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0)));
end

always @ (*) begin
    ap_block_state5_io = (((tmp_1_reg_564 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0)) | ((tmp_1_reg_564 == 1'd1) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0)));
end

assign grp_fu_461_p0 = grp_fu_461_p00;

assign grp_fu_461_p00 = triangle_2d_y1_V;

assign grp_fu_461_p1 = rhs_V_3_fu_115_p1;

assign grp_fu_470_p0 = grp_fu_470_p00;

assign grp_fu_470_p00 = triangle_2d_x1_V;

assign grp_fu_470_p1 = rhs_V_2_fu_101_p1;

assign grp_fu_479_p0 = grp_fu_479_p00;

assign grp_fu_479_p00 = agg_result_V_i3_reg_644;

assign grp_fu_479_p1 = grp_fu_479_p10;

assign grp_fu_479_p10 = agg_result_V_i2_reg_638;

assign in0_V_in2_V_i1_fu_258_p3 = ((tmp_i1_7_fu_254_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_583 : triangle_2d_x2_V);

assign in0_V_in2_V_i2_fu_296_p3 = ((tmp_i2_8_fu_292_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_593 : triangle_2d_y2_V);

assign in0_V_in2_V_i3_fu_334_p3 = ((tmp_i3_9_fu_330_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_593 : triangle_2d_y2_V);

assign in0_V_in2_V_i_fu_220_p3 = ((tmp_i_6_fu_216_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_583 : triangle_2d_x2_V);

assign in1_V_in2_V_i1_fu_268_p3 = ((tmp_5_i_fu_264_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_603 : triangle_2d_x2_V);

assign in1_V_in2_V_i2_fu_306_p3 = ((tmp_4_i1_fu_302_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_613 : triangle_2d_y2_V);

assign in1_V_in2_V_i3_fu_344_p3 = ((tmp_5_i1_fu_340_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_613 : triangle_2d_y2_V);

assign in1_V_in2_V_i_fu_230_p3 = ((tmp_4_i_fu_226_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_603 : triangle_2d_x2_V);

assign lhs_V_2_fu_97_p1 = triangle_2d_x2_V;

assign lhs_V_5_fu_126_p1 = triangle_2d_y2_V;

assign lhs_V_fu_383_p1 = agg_result_V_i1_reg_631;

assign p_Result_1_fu_436_p5 = {{{{{{8'd0}, {max_min_V_4}}}, {max_min_V_3}}}, {max_min_V_2_load_reg_578}};

assign p_Result_2_fu_199_p5 = {{{{triangle_2d_same_x1_s_fu_187_p3}, {triangle_2d_same_y0_s_fu_181_p3}}, {triangle_2d_same_x0_s_fu_175_p3}}, {8'd0}};

assign p_Result_3_fu_364_p5 = {{{{triangle_2d_z_V}, {triangle_2d_y2_V}}, {triangle_2d_x2_V}}, {triangle_2d_same_y1_s_reg_613}};

assign p_Result_4_fu_410_p4 = {{{agg_result_V_i1_reg_631}, {agg_result_V_i_reg_624}}, {grp_fu_479_p3}};

assign p_Result_5_fu_418_p5 = {{{{{{8'd0}, {tmp_8_reg_650}}}, {agg_result_V_i3_reg_644}}}, {agg_result_V_i2_reg_638}};

assign p_Result_s_fu_452_p4 = {{{max_min_V_1_load_reg_573}, {max_min_V_0_load_reg_568}}, {max_index_V_0}};

assign r_V_2_fu_105_p2 = (lhs_V_2_fu_97_p1 - rhs_V_2_fu_101_p1);

assign r_V_5_fu_130_p2 = (lhs_V_5_fu_126_p1 - rhs_V_3_fu_115_p1);

assign r_V_8_fu_147_p2 = ($signed(r_V_4_reg_539) - $signed(r_V_7_reg_549));

assign r_V_fu_389_p2 = (lhs_V_fu_383_p1 - rhs_V_fu_386_p1);

assign rhs_V_2_fu_101_p1 = triangle_2d_x0_V;

assign rhs_V_3_fu_115_p1 = triangle_2d_y0_V;

assign rhs_V_fu_386_p1 = agg_result_V_i_reg_624;

assign tmp_1_fu_151_p2 = ((tmp_reg_544 == tmp_4_reg_554) ? 1'b1 : 1'b0);

assign tmp_4_fu_144_p1 = grp_fu_470_p3[16:0];

assign tmp_4_i1_fu_302_p2 = ((triangle_2d_same_y1_s_reg_613 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_226_p2 = ((triangle_2d_same_x1_s_reg_603 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign tmp_5_fu_167_p3 = r_V_8_fu_147_p2[32'd17];

assign tmp_5_i1_fu_340_p2 = ((triangle_2d_same_y1_s_reg_613 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign tmp_5_i_fu_264_p2 = ((triangle_2d_same_x1_s_reg_603 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign tmp_8_fu_373_p2 = (agg_result_V_i1_reg_631 - agg_result_V_i_reg_624);

assign tmp_fu_123_p1 = grp_fu_461_p3[16:0];

assign tmp_i1_7_fu_254_p2 = ((triangle_2d_same_x0_s_reg_583 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign tmp_i1_fu_250_p2 = ((triangle_2d_same_x0_s_reg_583 > triangle_2d_same_x1_s_reg_603) ? 1'b1 : 1'b0);

assign tmp_i2_8_fu_292_p2 = ((triangle_2d_same_y0_s_reg_593 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign tmp_i2_fu_288_p2 = ((triangle_2d_same_y0_s_reg_593 < triangle_2d_same_y1_s_reg_613) ? 1'b1 : 1'b0);

assign tmp_i3_9_fu_330_p2 = ((triangle_2d_same_y0_s_reg_593 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign tmp_i3_fu_326_p2 = ((triangle_2d_same_y0_s_reg_593 > triangle_2d_same_y1_s_reg_613) ? 1'b1 : 1'b0);

assign tmp_i_6_fu_216_p2 = ((triangle_2d_same_x0_s_reg_583 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign tmp_i_fu_212_p2 = ((triangle_2d_same_x0_s_reg_583 < triangle_2d_same_x1_s_reg_603) ? 1'b1 : 1'b0);

assign triangle_2d_same_x0_s_fu_175_p3 = ((tmp_5_fu_167_p3[0:0] === 1'b1) ? triangle_2d_x1_V : triangle_2d_x0_V);

assign triangle_2d_same_x1_s_fu_187_p3 = ((tmp_5_fu_167_p3[0:0] === 1'b1) ? triangle_2d_x0_V : triangle_2d_x1_V);

assign triangle_2d_same_y0_s_fu_181_p3 = ((tmp_5_fu_167_p3[0:0] === 1'b1) ? triangle_2d_y1_V : triangle_2d_y0_V);

assign triangle_2d_same_y1_s_fu_193_p3 = ((tmp_5_fu_167_p3[0:0] === 1'b1) ? triangle_2d_y0_V : triangle_2d_y1_V);

endmodule //rasterization1_odd_m
