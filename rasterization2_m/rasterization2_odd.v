// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization2_odd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp0_stage0 = 8'd16;
parameter    ap_ST_fsm_state26 = 8'd32;
parameter    ap_ST_fsm_pp1_stage0 = 8'd64;
parameter    ap_ST_fsm_state29 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg[31:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] fragment_x_V_address0;
reg    fragment_x_V_ce0;
reg    fragment_x_V_we0;
wire   [7:0] fragment_x_V_q0;
reg   [8:0] fragment_y_V_address0;
reg    fragment_y_V_ce0;
reg    fragment_y_V_we0;
wire   [7:0] fragment_y_V_q0;
reg   [8:0] fragment_z_V_address0;
reg    fragment_z_V_ce0;
reg    fragment_z_V_we0;
wire   [7:0] fragment_z_V_q0;
reg   [8:0] fragment_color_V_address0;
reg    fragment_color_V_ce0;
reg    fragment_color_V_we0;
wire   [7:0] fragment_color_V_q0;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    Output_1_V_V_blk_n;
reg   [0:0] icmp_ln361_reg_582;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln387_reg_753;
reg   [15:0] t_V_2_reg_175;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
wire    ap_block_state20_pp0_stage0_iter15;
wire    ap_block_state21_pp0_stage0_iter16;
wire    ap_block_state22_pp0_stage0_iter17;
wire    ap_block_state23_pp0_stage0_iter18;
wire    ap_block_state24_pp0_stage0_iter19;
wire    ap_block_state25_pp0_stage0_iter20;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] i_op_assign_reg_187;
reg   [7:0] triangle_2d_same_x0_s_reg_567;
reg    ap_block_state1;
wire   [7:0] grp_fu_208_p4;
reg   [7:0] triangle_2d_same_y0_s_reg_572;
reg   [7:0] triangle_2d_same_x1_s_reg_577;
wire   [0:0] icmp_ln361_fu_238_p2;
wire   [7:0] triangle_2d_same_y1_s_fu_244_p1;
reg   [7:0] triangle_2d_same_y1_s_reg_586;
reg   [7:0] triangle_2d_same_x2_s_reg_591;
reg   [7:0] triangle_2d_same_y2_s_reg_596;
reg   [7:0] triangle_2d_same_z_V_reg_601;
wire   [15:0] trunc_ln647_fu_248_p1;
reg   [15:0] trunc_ln647_reg_606;
reg   [7:0] p_Result_9_reg_611;
wire   [7:0] trunc_ln647_1_fu_252_p1;
reg   [7:0] trunc_ln647_1_reg_616;
reg    ap_block_state4_io;
wire   [15:0] zext_ln1371_fu_256_p1;
reg   [15:0] zext_ln1371_reg_635;
wire   [8:0] rhs_V_11_fu_260_p1;
reg   [8:0] rhs_V_11_reg_641;
wire   [8:0] lhs_V_14_fu_263_p1;
reg   [8:0] lhs_V_14_reg_646;
wire   [8:0] rhs_V_12_fu_266_p1;
reg   [8:0] rhs_V_12_reg_651;
wire  signed [17:0] rhs_V_2_fu_275_p1;
reg  signed [17:0] rhs_V_2_reg_656;
wire   [8:0] lhs_V_15_fu_279_p1;
reg   [8:0] lhs_V_15_reg_661;
wire  signed [17:0] rhs_V_3_fu_288_p1;
reg  signed [17:0] rhs_V_3_reg_666;
wire   [8:0] lhs_V_16_fu_292_p1;
reg   [8:0] lhs_V_16_reg_671;
wire  signed [17:0] rhs_V_6_fu_301_p1;
reg  signed [17:0] rhs_V_6_reg_676;
wire   [8:0] lhs_V_17_fu_305_p1;
reg   [8:0] lhs_V_17_reg_681;
wire  signed [17:0] rhs_V_7_fu_314_p1;
reg  signed [17:0] rhs_V_7_reg_686;
wire  signed [17:0] rhs_V_10_fu_324_p1;
reg  signed [17:0] rhs_V_10_reg_691;
wire  signed [17:0] rhs_V_fu_334_p1;
reg  signed [17:0] rhs_V_reg_696;
wire   [0:0] icmp_ln369_fu_348_p2;
reg   [0:0] icmp_ln369_reg_701;
wire   [15:0] k_V_fu_353_p2;
reg   [15:0] k_V_reg_705;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] x_V_fu_373_p2;
reg   [7:0] x_V_reg_710;
wire   [7:0] y_V_fu_382_p2;
reg   [7:0] y_V_reg_715;
wire   [8:0] ret_V_2_fu_391_p2;
reg   [8:0] ret_V_2_reg_720;
wire   [8:0] ret_V_5_fu_400_p2;
reg  signed [8:0] ret_V_5_reg_725;
wire   [8:0] ret_V_9_fu_405_p2;
reg   [8:0] ret_V_9_reg_730;
wire   [8:0] ret_V_12_fu_410_p2;
reg  signed [8:0] ret_V_12_reg_735;
wire   [8:0] ret_V_16_fu_415_p2;
reg   [8:0] ret_V_16_reg_740;
wire   [8:0] ret_V_19_fu_420_p2;
reg  signed [8:0] ret_V_19_reg_745;
wire   [0:0] icmp_ln387_fu_510_p2;
wire    ap_block_state27_pp1_stage0_iter0;
wire    ap_block_state28_pp1_stage0_iter1;
reg    ap_block_state28_io;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] j_fu_516_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state27;
reg   [15:0] ap_phi_mux_t_V_2_phi_fu_179_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln544_fu_475_p1;
wire   [0:0] tmp_2_fu_467_p3;
wire   [63:0] zext_ln389_fu_522_p1;
reg   [15:0] t_V_1_fu_68;
wire   [15:0] i_top_V_fu_489_p2;
reg   [15:0] t_V_fu_72;
wire   [15:0] i_V_fu_483_p2;
wire   [31:0] tmp_V_fu_505_p1;
wire   [31:0] p_Result_s_fu_530_p5;
wire    ap_block_pp1_stage0_01001;
wire   [1:0] flag_V_fu_234_p1;
wire   [8:0] ret_V_3_fu_269_p2;
wire   [8:0] ret_V_6_fu_282_p2;
wire   [8:0] ret_V_10_fu_295_p2;
wire   [8:0] ret_V_13_fu_308_p2;
wire   [8:0] ret_V_17_fu_318_p2;
wire   [8:0] ret_V_20_fu_328_p2;
wire   [7:0] grp_fu_359_p1;
wire   [7:0] grp_fu_364_p1;
wire   [7:0] grp_fu_359_p2;
wire   [7:0] ret_V_fu_369_p1;
wire   [7:0] grp_fu_364_p2;
wire   [7:0] trunc_ln209_fu_378_p1;
wire   [8:0] lhs_V_fu_387_p1;
wire   [8:0] lhs_V_3_fu_396_p1;
wire  signed [8:0] ret_V_4_fu_428_p0;
wire  signed [8:0] ret_V_4_fu_428_p1;
wire  signed [8:0] ret_V_11_fu_439_p0;
wire  signed [8:0] ret_V_11_fu_439_p1;
wire  signed [8:0] ret_V_18_fu_450_p0;
wire  signed [8:0] ret_V_18_fu_450_p1;
wire  signed [17:0] grp_fu_543_p3;
wire  signed [17:0] grp_fu_551_p3;
wire   [17:0] or_ln92_fu_458_p2;
wire  signed [17:0] grp_fu_559_p3;
wire   [17:0] or_ln92_1_fu_462_p2;
wire  signed [8:0] grp_fu_543_p0;
wire   [17:0] grp_fu_543_p2;
wire  signed [8:0] grp_fu_551_p0;
wire   [17:0] grp_fu_551_p2;
wire  signed [8:0] grp_fu_559_p0;
wire   [17:0] grp_fu_559_p2;
wire    ap_CS_fsm_state29;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
end

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_x_V_address0),
    .ce0(fragment_x_V_ce0),
    .we0(fragment_x_V_we0),
    .d0(x_V_reg_710),
    .q0(fragment_x_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_y_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_y_V_address0),
    .ce0(fragment_y_V_ce0),
    .we0(fragment_y_V_we0),
    .d0(y_V_reg_715),
    .q0(fragment_y_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_z_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_z_V_address0),
    .ce0(fragment_z_V_ce0),
    .we0(fragment_z_V_we0),
    .d0(triangle_2d_same_z_V_reg_601),
    .q0(fragment_z_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_color_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_color_V_address0),
    .ce0(fragment_color_V_ce0),
    .we0(fragment_color_V_we0),
    .d0(8'd100),
    .q0(fragment_color_V_q0)
);

rasterization2_m_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rasterization2_m_fYi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_2_phi_fu_179_p4),
    .din1(grp_fu_359_p1),
    .ce(1'b1),
    .dout(grp_fu_359_p2)
);

rasterization2_m_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rasterization2_m_g8j_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_2_phi_fu_179_p4),
    .din1(grp_fu_364_p1),
    .ce(1'b1),
    .dout(grp_fu_364_p2)
);

rasterization2_m_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_m_hbi_U3(
    .din0(grp_fu_543_p0),
    .din1(ret_V_5_reg_725),
    .din2(grp_fu_543_p2),
    .dout(grp_fu_543_p3)
);

rasterization2_m_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_m_hbi_U4(
    .din0(grp_fu_551_p0),
    .din1(ret_V_12_reg_735),
    .din2(grp_fu_551_p2),
    .dout(grp_fu_551_p3)
);

rasterization2_m_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_m_hbi_U5(
    .din0(grp_fu_559_p0),
    .din1(ret_V_19_reg_745),
    .din2(grp_fu_559_p2),
    .dout(grp_fu_559_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter20 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state27))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state27);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln387_fu_510_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_op_assign_reg_187 <= j_fu_516_p2;
    end else if (((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state26))) begin
        i_op_assign_reg_187 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_467_p3 == 1'd0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_fu_68 <= i_top_V_fu_489_p2;
    end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_1_fu_68 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_2_reg_175 <= 16'd0;
    end else if (((icmp_ln369_reg_701 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_2_reg_175 <= k_V_reg_705;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_467_p3 == 1'd0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_fu_72 <= i_V_fu_483_p2;
    end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_fu_72 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln361_reg_582 <= icmp_ln361_fu_238_p2;
        triangle_2d_same_x0_s_reg_567 <= {{Input_1_V_V[15:8]}};
        triangle_2d_same_x1_s_reg_577 <= {{Input_1_V_V[31:24]}};
        triangle_2d_same_y0_s_reg_572 <= {{Input_1_V_V[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln369_reg_701 <= icmp_ln369_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln387_reg_753 <= icmp_ln387_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_V_reg_705 <= k_V_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        lhs_V_14_reg_646[7 : 0] <= lhs_V_14_fu_263_p1[7 : 0];
        lhs_V_15_reg_661[7 : 0] <= lhs_V_15_fu_279_p1[7 : 0];
        lhs_V_16_reg_671[7 : 0] <= lhs_V_16_fu_292_p1[7 : 0];
        lhs_V_17_reg_681[7 : 0] <= lhs_V_17_fu_305_p1[7 : 0];
        rhs_V_10_reg_691 <= rhs_V_10_fu_324_p1;
        rhs_V_11_reg_641[7 : 0] <= rhs_V_11_fu_260_p1[7 : 0];
        rhs_V_12_reg_651[7 : 0] <= rhs_V_12_fu_266_p1[7 : 0];
        rhs_V_2_reg_656 <= rhs_V_2_fu_275_p1;
        rhs_V_3_reg_666 <= rhs_V_3_fu_288_p1;
        rhs_V_6_reg_676 <= rhs_V_6_fu_301_p1;
        rhs_V_7_reg_686 <= rhs_V_7_fu_314_p1;
        rhs_V_reg_696 <= rhs_V_fu_334_p1;
        zext_ln1371_reg_635[7 : 0] <= zext_ln1371_fu_256_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Result_9_reg_611 <= {{Input_1_V_V[23:16]}};
        trunc_ln647_reg_606 <= trunc_ln647_fu_248_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ret_V_12_reg_735 <= ret_V_12_fu_410_p2;
        ret_V_16_reg_740 <= ret_V_16_fu_415_p2;
        ret_V_19_reg_745 <= ret_V_19_fu_420_p2;
        ret_V_2_reg_720 <= ret_V_2_fu_391_p2;
        ret_V_5_reg_725 <= ret_V_5_fu_400_p2;
        ret_V_9_reg_730 <= ret_V_9_fu_405_p2;
        x_V_reg_710 <= x_V_fu_373_p2;
        y_V_reg_715 <= y_V_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        triangle_2d_same_x2_s_reg_591 <= {{Input_1_V_V[15:8]}};
        triangle_2d_same_y1_s_reg_586 <= triangle_2d_same_y1_s_fu_244_p1;
        triangle_2d_same_y2_s_reg_596 <= {{Input_1_V_V[23:16]}};
        triangle_2d_same_z_V_reg_601 <= {{Input_1_V_V[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (1'b1 == ap_CS_fsm_state4))) begin
        trunc_ln647_1_reg_616 <= trunc_ln647_1_fu_252_p1;
    end
end

always @ (*) begin
    if (((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln387_reg_753 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Output_1_V_V = p_Result_s_fu_530_p5;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        Output_1_V_V = tmp_V_fu_505_p1;
    end else if (((icmp_ln361_reg_582 == 1'd0) & (1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
        Output_1_V_V = 32'd0;
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln387_reg_753 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state26)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((icmp_ln361_reg_582 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln387_reg_753 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln369_fu_348_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln387_fu_510_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln369_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_V_2_phi_fu_179_p4 = k_V_reg_705;
    end else begin
        ap_phi_mux_t_V_2_phi_fu_179_p4 = t_V_2_reg_175;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_color_V_address0 = zext_ln389_fu_522_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        fragment_color_V_address0 = zext_ln544_fu_475_p1;
    end else begin
        fragment_color_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_color_V_ce0 = 1'b1;
    end else begin
        fragment_color_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_467_p3 == 1'd0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_color_V_we0 = 1'b1;
    end else begin
        fragment_color_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_x_V_address0 = zext_ln389_fu_522_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        fragment_x_V_address0 = zext_ln544_fu_475_p1;
    end else begin
        fragment_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_x_V_ce0 = 1'b1;
    end else begin
        fragment_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_467_p3 == 1'd0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_x_V_we0 = 1'b1;
    end else begin
        fragment_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_y_V_address0 = zext_ln389_fu_522_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        fragment_y_V_address0 = zext_ln544_fu_475_p1;
    end else begin
        fragment_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_y_V_ce0 = 1'b1;
    end else begin
        fragment_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_467_p3 == 1'd0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_y_V_we0 = 1'b1;
    end else begin
        fragment_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_z_V_address0 = zext_ln389_fu_522_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        fragment_z_V_address0 = zext_ln544_fu_475_p1;
    end else begin
        fragment_z_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_z_V_ce0 = 1'b1;
    end else begin
        fragment_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_467_p3 == 1'd0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_z_V_we0 = 1'b1;
    end else begin
        fragment_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state4_io)) & (icmp_ln361_reg_582 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln369_fu_348_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln369_fu_348_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln387_fu_510_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln387_fu_510_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state28_io));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state28_io));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((icmp_ln387_reg_753 == 1'd0) & (1'b0 == Output_1_V_V_ap_ack));
end

assign ap_block_state28_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln361_reg_582 == 1'd0) & (1'b0 == Output_1_V_V_ap_ack));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign flag_V_fu_234_p1 = Input_1_V_V[1:0];

assign grp_fu_208_p4 = {{Input_1_V_V[23:16]}};

assign grp_fu_359_p1 = zext_ln1371_reg_635;

assign grp_fu_364_p1 = zext_ln1371_reg_635;

assign grp_fu_543_p0 = rhs_V_3_reg_666;

assign grp_fu_543_p2 = ($signed(ret_V_4_fu_428_p0) * $signed(ret_V_4_fu_428_p1));

assign grp_fu_551_p0 = rhs_V_7_reg_686;

assign grp_fu_551_p2 = ($signed(ret_V_11_fu_439_p0) * $signed(ret_V_11_fu_439_p1));

assign grp_fu_559_p0 = rhs_V_reg_696;

assign grp_fu_559_p2 = ($signed(ret_V_18_fu_450_p0) * $signed(ret_V_18_fu_450_p1));

assign i_V_fu_483_p2 = (t_V_fu_72 + 16'd1);

assign i_top_V_fu_489_p2 = (t_V_1_fu_68 + 16'd1);

assign icmp_ln361_fu_238_p2 = ((flag_V_fu_234_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln369_fu_348_p2 = ((ap_phi_mux_t_V_2_phi_fu_179_p4 == trunc_ln647_reg_606) ? 1'b1 : 1'b0);

assign icmp_ln387_fu_510_p2 = ((i_op_assign_reg_187 == t_V_fu_72) ? 1'b1 : 1'b0);

assign j_fu_516_p2 = (i_op_assign_reg_187 + 16'd1);

assign k_V_fu_353_p2 = (ap_phi_mux_t_V_2_phi_fu_179_p4 + 16'd1);

assign lhs_V_14_fu_263_p1 = triangle_2d_same_y1_s_reg_586;

assign lhs_V_15_fu_279_p1 = triangle_2d_same_x1_s_reg_577;

assign lhs_V_16_fu_292_p1 = triangle_2d_same_y2_s_reg_596;

assign lhs_V_17_fu_305_p1 = triangle_2d_same_x2_s_reg_591;

assign lhs_V_3_fu_396_p1 = y_V_fu_382_p2;

assign lhs_V_fu_387_p1 = x_V_fu_373_p2;

assign or_ln92_1_fu_462_p2 = (or_ln92_fu_458_p2 | grp_fu_559_p3);

assign or_ln92_fu_458_p2 = (grp_fu_551_p3 | grp_fu_543_p3);

assign p_Result_s_fu_530_p5 = {{{{fragment_color_V_q0}, {fragment_z_V_q0}}, {fragment_y_V_q0}}, {fragment_x_V_q0}};

assign ret_V_10_fu_295_p2 = (lhs_V_16_fu_292_p1 - lhs_V_14_fu_263_p1);

assign ret_V_11_fu_439_p0 = rhs_V_6_reg_676;

assign ret_V_11_fu_439_p1 = ret_V_9_reg_730;

assign ret_V_12_fu_410_p2 = (lhs_V_3_fu_396_p1 - lhs_V_14_reg_646);

assign ret_V_13_fu_308_p2 = (lhs_V_17_fu_305_p1 - lhs_V_15_fu_279_p1);

assign ret_V_16_fu_415_p2 = (lhs_V_fu_387_p1 - lhs_V_17_reg_681);

assign ret_V_17_fu_318_p2 = (rhs_V_12_fu_266_p1 - lhs_V_16_fu_292_p1);

assign ret_V_18_fu_450_p0 = ret_V_16_reg_740;

assign ret_V_18_fu_450_p1 = rhs_V_10_reg_691;

assign ret_V_19_fu_420_p2 = (lhs_V_3_fu_396_p1 - lhs_V_16_reg_671);

assign ret_V_20_fu_328_p2 = (rhs_V_11_fu_260_p1 - lhs_V_17_fu_305_p1);

assign ret_V_2_fu_391_p2 = (lhs_V_fu_387_p1 - rhs_V_11_reg_641);

assign ret_V_3_fu_269_p2 = (lhs_V_14_fu_263_p1 - rhs_V_12_fu_266_p1);

assign ret_V_4_fu_428_p0 = rhs_V_2_reg_656;

assign ret_V_4_fu_428_p1 = ret_V_2_reg_720;

assign ret_V_5_fu_400_p2 = (lhs_V_3_fu_396_p1 - rhs_V_12_reg_651);

assign ret_V_6_fu_282_p2 = (lhs_V_15_fu_279_p1 - rhs_V_11_fu_260_p1);

assign ret_V_9_fu_405_p2 = (lhs_V_fu_387_p1 - lhs_V_15_reg_661);

assign ret_V_fu_369_p1 = grp_fu_359_p2[7:0];

assign rhs_V_10_fu_324_p1 = $signed(ret_V_17_fu_318_p2);

assign rhs_V_11_fu_260_p1 = triangle_2d_same_x0_s_reg_567;

assign rhs_V_12_fu_266_p1 = triangle_2d_same_y0_s_reg_572;

assign rhs_V_2_fu_275_p1 = $signed(ret_V_3_fu_269_p2);

assign rhs_V_3_fu_288_p1 = $signed(ret_V_6_fu_282_p2);

assign rhs_V_6_fu_301_p1 = $signed(ret_V_10_fu_295_p2);

assign rhs_V_7_fu_314_p1 = $signed(ret_V_13_fu_308_p2);

assign rhs_V_fu_334_p1 = $signed(ret_V_20_fu_328_p2);

assign tmp_2_fu_467_p3 = or_ln92_1_fu_462_p2[32'd17];

assign tmp_V_fu_505_p1 = t_V_1_fu_68;

assign triangle_2d_same_y1_s_fu_244_p1 = Input_1_V_V[7:0];

assign trunc_ln209_fu_378_p1 = grp_fu_364_p2[7:0];

assign trunc_ln647_1_fu_252_p1 = Input_1_V_V[7:0];

assign trunc_ln647_fu_248_p1 = Input_1_V_V[15:0];

assign x_V_fu_373_p2 = (ret_V_fu_369_p1 + p_Result_9_reg_611);

assign y_V_fu_382_p2 = (trunc_ln209_fu_378_p1 + trunc_ln647_1_reg_616);

assign zext_ln1371_fu_256_p1 = grp_fu_208_p4;

assign zext_ln389_fu_522_p1 = i_op_assign_reg_187;

assign zext_ln544_fu_475_p1 = t_V_fu_72;

always @ (posedge ap_clk) begin
    zext_ln1371_reg_635[15:8] <= 8'b00000000;
    rhs_V_11_reg_641[8] <= 1'b0;
    lhs_V_14_reg_646[8] <= 1'b0;
    rhs_V_12_reg_651[8] <= 1'b0;
    lhs_V_15_reg_661[8] <= 1'b0;
    lhs_V_16_reg_671[8] <= 1'b0;
    lhs_V_17_reg_681[8] <= 1'b0;
end

endmodule //rasterization2_odd
