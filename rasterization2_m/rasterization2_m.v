// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rasterization2_m,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.392000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=12,HLS_SYN_FF=4000,HLS_SYN_LUT=3777,HLS_VERSION=2018_2}" *)

module rasterization2_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack,
        Input_2_V_V,
        Input_2_V_V_ap_vld,
        Input_2_V_V_ap_ack,
        Output_3_V_V,
        Output_3_V_V_ap_vld,
        Output_3_V_V_ap_ack,
        Output_4_V_V,
        Output_4_V_V_ap_vld,
        Output_4_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;
input  [31:0] Input_2_V_V;
input   Input_2_V_V_ap_vld;
output   Input_2_V_V_ap_ack;
output  [31:0] Output_3_V_V;
output   Output_3_V_V_ap_vld;
input   Output_3_V_V_ap_ack;
output  [31:0] Output_4_V_V;
output   Output_4_V_V_ap_vld;
input   Output_4_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Input_2_V_V_ap_ack;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_rasterization2_odd_fu_58_ap_start;
wire    grp_rasterization2_odd_fu_58_ap_done;
wire    grp_rasterization2_odd_fu_58_ap_idle;
wire    grp_rasterization2_odd_fu_58_ap_ready;
wire    grp_rasterization2_odd_fu_58_Input_1_V_V_ap_ack;
wire   [31:0] grp_rasterization2_odd_fu_58_Output_1_V_V;
wire    grp_rasterization2_odd_fu_58_Output_1_V_V_ap_vld;
wire   [31:0] grp_rasterization2_odd_fu_58_Output_2_V_V;
wire    grp_rasterization2_odd_fu_58_Output_2_V_V_ap_vld;
wire    grp_rasterization2_even_fu_82_ap_start;
wire    grp_rasterization2_even_fu_82_ap_done;
wire    grp_rasterization2_even_fu_82_ap_idle;
wire    grp_rasterization2_even_fu_82_ap_ready;
wire    grp_rasterization2_even_fu_82_Input_1_V_V_ap_ack;
wire   [31:0] grp_rasterization2_even_fu_82_Output_1_V_V;
wire    grp_rasterization2_even_fu_82_Output_1_V_V_ap_vld;
wire   [31:0] grp_rasterization2_even_fu_82_Output_2_V_V;
wire    grp_rasterization2_even_fu_82_Output_2_V_V_ap_vld;
reg    grp_rasterization2_odd_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    ap_block_state2_on_subcall_done;
reg    grp_rasterization2_even_fu_82_ap_start_reg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_rasterization2_odd_fu_58_ap_start_reg = 1'b0;
#0 grp_rasterization2_even_fu_82_ap_start_reg = 1'b0;
end

rasterization2_odd grp_rasterization2_odd_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization2_odd_fu_58_ap_start),
    .ap_done(grp_rasterization2_odd_fu_58_ap_done),
    .ap_idle(grp_rasterization2_odd_fu_58_ap_idle),
    .ap_ready(grp_rasterization2_odd_fu_58_ap_ready),
    .Input_1_V_V(Input_1_V_V),
    .Input_1_V_V_ap_vld(Input_1_V_V_ap_vld),
    .Input_1_V_V_ap_ack(grp_rasterization2_odd_fu_58_Input_1_V_V_ap_ack),
    .Output_1_V_V(grp_rasterization2_odd_fu_58_Output_1_V_V),
    .Output_1_V_V_ap_vld(grp_rasterization2_odd_fu_58_Output_1_V_V_ap_vld),
    .Output_1_V_V_ap_ack(Output_1_V_V_ap_ack),
    .Output_2_V_V(grp_rasterization2_odd_fu_58_Output_2_V_V),
    .Output_2_V_V_ap_vld(grp_rasterization2_odd_fu_58_Output_2_V_V_ap_vld),
    .Output_2_V_V_ap_ack(Output_2_V_V_ap_ack)
);

rasterization2_even grp_rasterization2_even_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization2_even_fu_82_ap_start),
    .ap_done(grp_rasterization2_even_fu_82_ap_done),
    .ap_idle(grp_rasterization2_even_fu_82_ap_idle),
    .ap_ready(grp_rasterization2_even_fu_82_ap_ready),
    .Input_1_V_V(Input_2_V_V),
    .Input_1_V_V_ap_vld(Input_2_V_V_ap_vld),
    .Input_1_V_V_ap_ack(grp_rasterization2_even_fu_82_Input_1_V_V_ap_ack),
    .Output_1_V_V(grp_rasterization2_even_fu_82_Output_1_V_V),
    .Output_1_V_V_ap_vld(grp_rasterization2_even_fu_82_Output_1_V_V_ap_vld),
    .Output_1_V_V_ap_ack(Output_3_V_V_ap_ack),
    .Output_2_V_V(grp_rasterization2_even_fu_82_Output_2_V_V),
    .Output_2_V_V_ap_vld(grp_rasterization2_even_fu_82_Output_2_V_V_ap_vld),
    .Output_2_V_V_ap_ack(Output_4_V_V_ap_ack)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization2_even_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_rasterization2_even_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization2_even_fu_82_ap_ready == 1'b1)) begin
            grp_rasterization2_even_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization2_odd_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_rasterization2_odd_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization2_odd_fu_58_ap_ready == 1'b1)) begin
            grp_rasterization2_odd_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Input_1_V_V_ap_ack = grp_rasterization2_odd_fu_58_Input_1_V_V_ap_ack;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Input_2_V_V_ap_ack = grp_rasterization2_even_fu_82_Input_1_V_V_ap_ack;
    end else begin
        Input_2_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V = grp_rasterization2_odd_fu_58_Output_1_V_V;

assign Output_1_V_V_ap_vld = grp_rasterization2_odd_fu_58_Output_1_V_V_ap_vld;

assign Output_2_V_V = grp_rasterization2_odd_fu_58_Output_2_V_V;

assign Output_2_V_V_ap_vld = grp_rasterization2_odd_fu_58_Output_2_V_V_ap_vld;

assign Output_3_V_V = grp_rasterization2_even_fu_82_Output_1_V_V;

assign Output_3_V_V_ap_vld = grp_rasterization2_even_fu_82_Output_1_V_V_ap_vld;

assign Output_4_V_V = grp_rasterization2_even_fu_82_Output_2_V_V;

assign Output_4_V_V_ap_vld = grp_rasterization2_even_fu_82_Output_2_V_V_ap_vld;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_rasterization2_even_fu_82_ap_done == 1'b0) | (grp_rasterization2_odd_fu_58_ap_done == 1'b0));
end

assign grp_rasterization2_even_fu_82_ap_start = grp_rasterization2_even_fu_82_ap_start_reg;

assign grp_rasterization2_odd_fu_58_ap_start = grp_rasterization2_odd_fu_58_ap_start_reg;

endmodule //rasterization2_m
